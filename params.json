{"name":"Cmbjs","tagline":"A parsing library for JavaScript using parser combinators","body":"# cmb.js\r\n**A parsing library for JavaScript using parser combinators**\r\n\r\ncmb.js is a set of tools which can create a function that can parse a string and\r\noutput a parse tree. It basically generates a recursive descent parser by\r\nencapsulating the boilerplate code in a way that you can combine the parts\r\ndirectly into the parsing function merely by specifying the grammar.\r\n\r\n## Usage\r\n\r\n    var parse = cmb(config);\r\n    var parseTree = parse(\"abcdefg\");\r\n\r\n## Example\r\n\r\n    // Produces a parser that recognizes 0 or more a's\r\n    // followed by 1 or more b's\r\n    var parse = cmb({\r\n      grammar: {\r\n        \"sentence\": cmb.all(\"a's\", \"b's\"),\r\n        \"a's\": cmb.many(cmb.term(\"a\")),\r\n        \"b's\": cmb.all(cmb.term(\"b\"), cmb.many(cmb.term(\"b\")))\r\n      },\r\n      startRule: \"sentence\",\r\n      ignore: cmb.empty,\r\n      transforms: {\r\n        \"sentence\": function(value) {\r\n          return value.map(function(node) {\r\n\t          return node.value;\r\n          });\r\n        },\r\n        \"a's\": function(value) {\r\n          return value.map(function(node) {\r\n\t          return node.value;\r\n          });\r\n        },\r\n        \"b's\": function(value) {\r\n          var b = value[1].value.slice();\r\n          b.unshift(value[0]);\r\n          return b.map(function(node) { return node.value; });\r\n        }\r\n      }\r\n    });\r\n    var result = parse(\"aaabbbbb\");\r\n    // output:\r\n    // {\r\n    //   value: [[\"a\", \"a\", \"a\"], [\"b\", \"b\", \"b\", \"b\", \"b\"]],\r\n    //   state: ...,\r\n    //   name: \"sentence\"\r\n    // }\r\n\r\n\r\n## API\r\n\r\n- `cmb`: The parser generator. \r\n  - `term`:  produces a parselet that matches a string literal or a regular\r\n  expression.\r\n  - `empty`: a parselet that does nothing and produces an empty parse tree.\r\n  - `whitespace`: a parselet that matches a string of contiguous whitespace.\r\n  Shorthand for `cmb.term(/\\s+/)`.\r\n  - `maybe`: a combinator that takes a parselet and returns its result on a\r\n  match, or the resukt of `cmb.empty` otherwise. Analogous to the `?` operator\r\n  in regular expressions.\r\n  - `many`: a combinator that takes a parselet and returns 0 or more\r\n  consecutive matches in an array. Analogous to the `*` operator in regular\r\n  expressions.\r\n  - `any`: a combinator that takes a number of parselets in order and returns\r\n  the results of the first one that matches or an error if none match.\r\n  Analogous to the `|` operator in regular expressions.\r\n  - `all`: a combinator that takes a number of parselets and matches them in\r\n  sequence, returning an array of results on success and the first error it\r\n  encounters otherwise. Analogous to adjacent rules in regular expressions.\r\n- `config`: The language grammar specification fed to `cmb()` to produce a\r\nparsing function. `config` is an object which can have several optional fields:\r\n  - `grammar`: *(optional)* an object representing name-value pairs of\r\n  production rules. Specifying names are useful for defining a recursive rule,\r\n  naming a parse tree node, or applying a transform to the parse tree's output at\r\n  that level.\r\n  - `startRule`: *(optional)* a name or parselet which will act as the starting\r\n  point of the top-down parsing (the \"top\" of the grammar). If no rule is\r\n  specified, it assumes that it will start at a node named \"root\".\r\n  - `ignore`: *(optional)* a name or parselet that the parser will discard\r\n  before trying to find a production rule. Useful for discarding whitespace,\r\n  for example. It will not ignored the pattern in unnamed rules or subrules, so\r\n  if it is required to ignore space between subrules, it's best to name the\r\n  rules in the grammar. It defaults it cmb.empty, which matches nothing.\r\n  - `transforms`: *(optional)* an object of name-value pairs of transforms to\r\n  perform on a generated parse tree of a given production rule. Useful for\r\n  flattening a parse tree or removing noise from the output to make the output\r\n  easier for processing.\r\n\r\n## Parse Tree Format\r\n\r\n    {\r\n    \tvalue: <any value>,\r\n    \tstate: <obj>,\r\n    \terr: <string or array>,\r\n    \tname: <string>\r\n    }\r\n\r\n - `value`: *(optional)* The value found parsing the text. Can contain text,\r\n other parse tree nodes, an array of results, or anything a transform function\r\n puts in the node.\r\n - `state`: The state of the parser as of the last thing parsed. Useful for\r\n debugging as it shows you text representation of a parse subtree.\r\n - `err`: *(optional)* An error or array of errors produced when a parselet\r\n cannot parse the given string.\r\n - `name`: *(optional)* A string representing the name of a production rule.\r\n This is included in all production rule output, but not in the intermediate\r\n parselets.\r\n\r\n## Transforms\r\nThe default parse tree format is designed to be generic and informative in the\r\ncmb.js internals and therefore it can be a bit noisy. To make them easier to\r\nwork with, each named production rule can optionally come with a helper function\r\nto keep just the bare essentials in the tree structure.\r\n\r\nEach transform is a function which takes a node's old `value` as its parameter,\r\nand its output is set as the node's new `value`.  Note that only the node's\r\n`value` gets modified, resulting in a parse tree node like so:\r\n\r\n    {\r\n\t    value: transforms[originalName](originalValue),\r\n\t    state: originalState,\r\n\t    err: originalErr,\r\n\t    name: originalName\r\n    }\r\nOne last thing to note is that while parsing is done top-down, transforms are\r\ndone bottom-up, meaning that any child nodes (contained in the `value` field)\r\nhave already been subjected to transforms. This also makes possible any\r\nbottom-up syntax analysis before the value is returned.\r\n\r\n## License\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Sean Wolcott\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}